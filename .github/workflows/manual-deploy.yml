name: Manual Deploy to AWS S3 & CloudFront

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "배포할 브랜치 선택"
        required: true
        default: "main"
        type: string

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    environment: production
    env:
      NEXT_PUBLIC_NOTION_PAGE_ID: ${{ secrets.NOTION_PAGE_ID }}
      NEXT_PUBLIC_NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
      NEXT_PUBLIC_ACTIVE_NOTION_USER_ID: ${{ secrets.ACTIVE_NOTION_USER_ID }}
      NEXT_PUBLIC_NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
      NEXT_PUBLIC_NOTION_AUTH_TOKEN: ${{ secrets.NOTION_AUTH_TOKEN }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.SITE_URL }}
      NEXT_PUBLIC_AWS_API_URL: ${{ vars.AWS_API_URL }}
      NEXT_PUBLIC_AWS_COGNITO_URL: ${{ vars.AWS_COGNITO_URL }}
      NEXT_PUBLIC_NOTION_PORTFOLIO_PAGE_ID: ${{ secrets.NOTION_PORTFOLIO_PAGE_ID }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup pnpm & Node
        uses: ./.github/actions/pnpm-setup-node

      - name: Install Dependencies
        run: pnpm install

      - name: Build Next.js & Export Static Files
        run: pnpm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload excluding *.html, *.css, *.js, *.jpg, *.png
        run: |
          aws s3 cp ./out s3://${{ vars.AWS_S3_BUCKET_NAME }} --recursive \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "*.js" \
            --exclude "*.jpg" \
            --exclude "*.png" \
            --exclude "*.json" \
            --exclude "*.xml" \
            --metadata-directive REPLACE \
            --cache-control max-age=86400,s-maxage=31536000

      - name: Upload HTML to S3 (No Cache for Browser)
        run: |
          aws s3 cp ./out s3://${{ vars.AWS_S3_BUCKET_NAME }} --recursive --exclude "*" --include "*.html"  \
            --metadata-directive REPLACE \
            --cache-control "max-age=0, s-maxage=31536000"

      - name: Upload CSS & JS Files to S3 (Long-term Cache)
        run: |
          aws s3 cp ./out s3://${{ vars.AWS_S3_BUCKET_NAME }} --recursive --exclude "*" --include "*.css" --include "*.js" \
            --metadata-directive REPLACE \
            --cache-control "max-age=31536000, immutable"

      - name: Upload Images to S3 (1 Week Cache)
        run: |
          aws s3 cp ./out s3://${{ vars.AWS_S3_BUCKET_NAME }} --recursive --exclude "*" --include "*.jpg" --include "*.png" \
            --metadata-directive REPLACE \
            --cache-control "max-age=604800, public"

      - name: Upload *.json file to s3
        run: |
          aws s3 cp ./out s3://${{ vars.AWS_S3_BUCKET_NAME }} --recursive \
          --exclude "*" \
          --include "*.json" \
          --metadata-directive REPLACE \
          --content-type application/json \
          --cache-control "max-age=31536000, s-maxage=31536000"

      - name: Sync Sitemap Files to S3 (No Cache)
        run: |
          aws s3 sync ./out s3://${{ vars.AWS_S3_BUCKET_NAME }} --delete \
            --exclude "*" --include "*.xml" \
            --cache-control "max-age=0, s-maxage=31536000"

      - name: Invalidate CloudFront Cache (Only HTML, JSON)
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
           --paths "/*"
